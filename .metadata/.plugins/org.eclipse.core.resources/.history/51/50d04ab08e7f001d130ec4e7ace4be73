/*
 * shell.c
 *
 *  Created on: 7 juin 2019
 *      Author: Laurent Fiack
 */

#include "shell.h"

#include <stdio.h>
#include <stdlib.h>

#include "usart.h"
#include "gpio.h"

static char backspace[] = "\b \b";
static char prompt[] = "> ";

char uart_read(h_shell_t* shell) {
	char c;

	shell->uart.receive(&c, 1);
	//HAL_UART_Receive(&UART_DEVICE, (uint8_t*)(&c), 1, HAL_MAX_DELAY);

	return c;
}

static int uart_write(h_shell_t* shell, char * s, uint16_t size) {
	shell->uart.transmit(s, size);
	//HAL_UART_Transmit(&UART_DEVICE, (uint8_t*)s, size, HAL_MAX_DELAY);
	return size;
}

static int sh_help(h_shell_t* shell, int argc, char ** argv) {
	int i;
	for(i = 0 ; i < shell->shell_func_list_size ; i++) {
		int size;
		size = snprintf (shell->print_buffer, BUFFER_SIZE, "%c: %s\r\n", shell->shell_func_list[i].c, shell->shell_func_list[i].description);
		uart_write(shell, shell->print_buffer, size);
	}
	return 0;
}

void shell_init(h_shell_t* shell) {
	int size = 0;
	shell->shell_func_list_size = 0;
	shell->shellTaskHandler = NULL;


	size = snprintf (shell->print_buffer, BUFFER_SIZE, "\r\n\r\n===== Monsieur Shell v0.2 =====\r\n");
	uart_write(shell, shell->print_buffer, size);

	shell_add(shell, 'h', sh_help, "Help");
}

static void shellTask (void * pvParameters){
	h_shell_t* shell = (h_shell_t*) pvParameters;

	shell_run(shell);
}

void shell_start(h_shell_t* shell){
	if(pdTRUE == xTaskCreate(shellTask, "shellTask", STACK_DEPTH, (void*) shell, 10, &(shell->shellTaskHandler))){

	}else{
		printf("Shell task failed");
		Error_Handler();
	}

}

int shell_add(h_shell_t* shell, char c, int (* pfunc)(h_shell_t* shell, int argc, char ** argv), char * description) {
	if (shell->shell_func_list_size < SHELL_FUNC_LIST_MAX_SIZE) {
		shell->shell_func_list[shell->shell_func_list_size].c = c;
		shell->shell_func_list[shell->shell_func_list_size].func = pfunc;
		shell->shell_func_list[shell->shell_func_list_size].description = description;
		shell->shell_func_list_size++;
		return 0;
	}

	return -1;
}

// shell_exec return (int argc char ** argv)
static int shell_exec(h_shell_t* shell, char * buf) {
	int i;
	int j=0;

	// pas bon a partir de la

	char function_name[20];
	int j=1;
	while(buf[j]!=' '){
		sprintf(function_name,buf[j-1]);
		printf("function_name : %s\r\n",function_name);
	}

	char c = buf[0];
	printf("c:%s\r\n",c);


	int argc;
	char * argv[ARGC_MAX];
	char *p;

	for(i = 0 ; i < shell->shell_func_list_size ; i++) {
		if (shell->shell_func_list[i].c == c) {
			argc = 1;
			argv[0] = buf;

			for(p = buf ; *p != '\0' && argc < ARGC_MAX ; p++){
				if(*p == ' ') {
					*p = '\0';
					argv[argc++] = p+1;
				}
			}
			for(int q; q<argc;q++){
				printf("argv[%d] : %s\r\n",q,argv[q]);
			}
			return shell->shell_func_list[i].func(shell, argc, argv);
		}
	}

	int size;
	size = snprintf (shell->print_buffer, BUFFER_SIZE, "%c: no such command\r\n", c);
	uart_write(shell, shell->print_buffer, size);
	return -1;
}

int shell_run(h_shell_t* shell) {
	int reading = 0;
	int pos = 0;

	static char cmd_buffer[BUFFER_SIZE];

	while (1) {
		uart_write(shell, prompt, 2);
		reading = 1;

		while(reading) {
			//printf("shell reading loop in\r\n");
			char c = uart_read(shell);
			int size;

			switch (c) {
			//process RETURN key
			case '\r':
				//case '\n':
				size = snprintf (shell->print_buffer, BUFFER_SIZE, "\r\n");
				uart_write(shell, shell->print_buffer, size);
				cmd_buffer[pos++] = 0;     //add \0 char at end of string
				size = snprintf (shell->print_buffer, BUFFER_SIZE, ":%s\r\n", cmd_buffer);
				uart_write(shell, shell->print_buffer, size);
				reading = 0;        //exit read loop
				pos = 0;            //reset buffer
				break;
				//backspace
			case '\b':
				if (pos > 0) {      //is there a char to delete?
					pos--;          //remove it in buffer

					uart_write(shell, backspace, 3);	// delete the char on the terminal
				}
				break;
				//other characters
			default:
				//only store characters if buffer has space
				if (pos < BUFFER_SIZE) {
					uart_write(shell, &c, 1);
					cmd_buffer[pos++] = c; //store
				}
			}
		}
		shell_exec(shell, cmd_buffer);
	}
	return 0;
}
